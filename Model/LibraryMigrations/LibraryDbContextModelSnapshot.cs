// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.LibraryModel;

#nullable disable

namespace Model.LibraryMigrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Model.LibraryModel.Books.BookEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BookType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books", (string)null);

                    b.HasDiscriminator<string>("BookType").HasValue("Book");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Model.LibraryModel.JoinTables.LibrarianBiographyJt", b =>
                {
                    b.Property<int>("BiographyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BiographyId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("LibrarianBiographyJt", (string)null);
                });

            modelBuilder.Entity("Model.LibraryModel.Persons.PersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Persons", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Model.LibraryModel.Books.BiographyEntity", b =>
                {
                    b.HasBaseType("Model.LibraryModel.Books.BookEntity");

                    b.ToTable("Books", (string)null);

                    b.HasDiscriminator().HasValue("Biography");
                });

            modelBuilder.Entity("Model.LibraryModel.Books.FantasyEntity", b =>
                {
                    b.HasBaseType("Model.LibraryModel.Books.BookEntity");

                    b.ToTable("Books", (string)null);

                    b.HasDiscriminator().HasValue("Fantasy");
                });

            modelBuilder.Entity("Model.LibraryModel.Books.MysteryEntity", b =>
                {
                    b.HasBaseType("Model.LibraryModel.Books.BookEntity");

                    b.ToTable("Books", (string)null);

                    b.HasDiscriminator().HasValue("Mystery");
                });

            modelBuilder.Entity("Model.LibraryModel.Books.NonFictionEntity", b =>
                {
                    b.HasBaseType("Model.LibraryModel.Books.BookEntity");

                    b.ToTable("Books", (string)null);

                    b.HasDiscriminator().HasValue("NonFiction");
                });

            modelBuilder.Entity("Model.LibraryModel.Books.NovelEntity", b =>
                {
                    b.HasBaseType("Model.LibraryModel.Books.BookEntity");

                    b.ToTable("Books", (string)null);

                    b.HasDiscriminator().HasValue("Novel");
                });

            modelBuilder.Entity("Model.LibraryModel.Books.ScienceFictionEntity", b =>
                {
                    b.HasBaseType("Model.LibraryModel.Books.BookEntity");

                    b.ToTable("Books", (string)null);

                    b.HasDiscriminator().HasValue("ScienceFiction");
                });

            modelBuilder.Entity("Model.LibraryModel.Books.TextbookEntity", b =>
                {
                    b.HasBaseType("Model.LibraryModel.Books.BookEntity");

                    b.ToTable("Books", (string)null);

                    b.HasDiscriminator().HasValue("Textbook");
                });

            modelBuilder.Entity("Model.LibraryModel.Persons.AuthorEntity", b =>
                {
                    b.HasBaseType("Model.LibraryModel.Persons.PersonEntity");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("Model.LibraryModel.Persons.CustomerEntity", b =>
                {
                    b.HasBaseType("Model.LibraryModel.Persons.PersonEntity");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Model.LibraryModel.Persons.LibrarianEntity", b =>
                {
                    b.HasBaseType("Model.LibraryModel.Persons.PersonEntity");

                    b.ToTable("Librarians", (string)null);
                });

            modelBuilder.Entity("Model.LibraryModel.Books.BookEntity", b =>
                {
                    b.HasOne("Model.LibraryModel.Persons.AuthorEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Model.LibraryModel.JoinTables.LibrarianBiographyJt", b =>
                {
                    b.HasOne("Model.LibraryModel.Persons.AuthorEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.LibraryModel.Books.BiographyEntity", "Biography")
                        .WithMany()
                        .HasForeignKey("BiographyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Biography");
                });

            modelBuilder.Entity("Model.LibraryModel.Persons.AuthorEntity", b =>
                {
                    b.HasOne("Model.LibraryModel.Persons.PersonEntity", null)
                        .WithOne()
                        .HasForeignKey("Model.LibraryModel.Persons.AuthorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.LibraryModel.Persons.CustomerEntity", b =>
                {
                    b.HasOne("Model.LibraryModel.Persons.PersonEntity", null)
                        .WithOne()
                        .HasForeignKey("Model.LibraryModel.Persons.CustomerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.LibraryModel.Persons.LibrarianEntity", b =>
                {
                    b.HasOne("Model.LibraryModel.Persons.PersonEntity", null)
                        .WithOne()
                        .HasForeignKey("Model.LibraryModel.Persons.LibrarianEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
